<?php

/*
  This file is part of iTutor.
  Copyright (C) 2008 Oihane Garcia Bolumburu <oihaneg@gmail.com>
  Copyright (C) 2008 Ion Jaureguialzo Sarasola <widemos@gmail.com>

  iTutor is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  iTutor is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with iTutor. If not, see <http://www.gnu.org/licenses/>.
*/

?>
<?php
// auto-generated by sfPropelCrud
// date: 2008/03/07 14:00:43
?>
<?php

/**
 * horario actions.
 *
 * @package    gesal
 * @subpackage horario
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class horarioActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('horario', 'list');
  }
  
  public function executeCompleto()
  {
   $c= new Criteria();
   $c->add(ProfesorPeer::CODIGO, $this->getUser()->getAttribute('codigo'));
   $this->profesor = ProfesorPeer::doSelectOne($c);
   
   $d = new Criteria();
   $d->add(HoraperfilPeer::PERFIL_ID,$this->profesor->getPerfilId());
   $d->addJoin(HoraperfilPeer::HORA_ID,HoraPeer::ID);
   $d->addAscendingOrderByColumn(HoraperfilPeer::ORDEN);
   
    $this->horas = HoraPeer::doSelect($d); 
    
    $d = new Criteria();
    $d->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());   
    $this->horarios = HorarioPeer::doSelect($d);
    
    $this->asignaturas = AsignaturaPeer::doSelect(new Criteria());
    $this->grupos = GrupoPeer::doSelect (new Criteria());  
  }

  public function executeList()
  {
       
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);

    
    $this->asignaturas = AsignaturaPeer::doSelect(new Criteria());   
    $this->grupos = GrupoPeer::doSelect(new Criteria());
   
    $c = new Criteria();
    $c->add(HorarioPeer::PROFESOR_ID,$this->profesor->getId());
    
    $this->horarios = HorarioPeer::doSelect($c);
    
  }

  public function executeShow()
  {
    $this->horario = HorarioPeer::retrieveByPk($this->getRequestParameter('id'));
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    $this->asignaturas = AsignaturaPeer::doSelect(new Criteria());
    $this->grupos = GrupoPeer::doSelect(new Criteria());

    $this->forward404Unless($this->horario);
  }

  public function executeCreate()
  {
    $this->horario = new Horario();
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    $this->c = new Criteria();
    $this->c->add(AsignaturaPeer::PROFESOR_ID,$this->profesor->getId());
    $this->c->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    
    $this->horario->setDia($this->getRequestParameter('dia'));
    $this->horario->setHora($this->getRequestParameter('hora'));
    
    $this->crear = true;

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->horario = HorarioPeer::retrieveByPk($this->getRequestParameter('id'));
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->add(AsignaturaPeer::PROFESOR_ID,$this->profesor->getId());
    $this->c->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    
    $this->crear = $this->getRequestParameter('crear');
    if (!$this->crear)
    {
      $this->crear = false;    
    }
    
    $this->forward404Unless($this->horario);
  }
  
  public function executeEditdia()
  {
    $this->horario = HorarioPeer::retrieveByPk($this->getRequestParameter('id'));
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->add(AsignaturaPeer::PROFESOR_ID,$this->profesor->getId());
    $this->c->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    
    $this->crear = $this->getRequestParameter('crear');
    if (!$this->crear)
    {
      $this->crear = false;    
    }
    
    $conexion = Propel::getConnection();
    $consulta = "SELECT count(%s) AS max FROM %s WHERE %s='%s'";
    $consulta = sprintf($consulta, HoraperfilPeer::ID, HoraperfilPeer::TABLE_NAME, HoraperfilPeer::PERFIL_ID,$this->profesor->getPerfilId());
    $sentencia = $conexion->prepareStatement($consulta);
    $resultset = $sentencia->executeQuery();
    $resultset->next();
    $this->maximo = $resultset->getInt('max');
    
    
    $this->forward404Unless($this->horario);
  }

  public function executeUpdate()
  {
  if (!$this->getRequestParameter('asignatura_id') || !$this->getRequestParameter('grupo_id'))
   {
      $mensaje = 'No se puede crear el registro sin elegir asignatura y grupo.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    if (!$this->getRequestParameter('id'))
    {
        $horario = new Horario();
    }
    else
    {
      $horario = HorarioPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($horario);
    }
    
      
    $horario->setId($this->getRequestParameter('id'));
    $horario->setProfesorId($this->getRequestParameter('profesor_id') ? $this->getRequestParameter('profesor_id') : null);
    $horario->setAsignaturaId($this->getRequestParameter('asignatura_id') ? $this->getRequestParameter('asignatura_id') : null);
    $horario->setGrupoId($this->getRequestParameter('grupo_id') ? $this->getRequestParameter('grupo_id') : null);
    $horario->setDia($this->getRequestParameter('dia'));
    $horario->setHora($this->getRequestParameter('hora'));
    $horario->setObservaciones($this->getRequestParameter('observaciones'));
    $horario->setActivo($this->getRequestParameter('activo', 0));
    
    if ($this->getRequestParameter ('crear'))
    {

    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));

    $profesor = ProfesorPeer::doSelectOne($d);

    $c = new Criteria();
    $c->add(HorarioPeer::DIA,$this->getRequestParameter('dia'));
    $c->add(HorarioPeer::HORA,$this->getRequestParameter('hora'));
    $c->add(HorarioPeer::PROFESOR_ID,$profesor->getId());
    
    $horarioex = HorarioPeer::doSelectOne($c);
    
    if ($horarioex)
    {
      $mensaje = 'Este hueco está ocupado.';        
      return $this->redirect('principal/error?mensaje='.$mensaje);
    }
    else
    {
      $horario->save();
      $this->getUser()->setAttribute('horario',true);
      return $this->redirect('horario/completo');
     
    }
    }
    else
    {
      $horario->save();
      $this->getUser()->setAttribute('horario',true);
      return $this->redirect('horario/completo'); 
    }
    } 
  }
  
  public function executeUpdatedia()
  {
  
    $horario = HorarioPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($horario);

    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));

    $profesor = ProfesorPeer::doSelectOne($d);

    $c = new Criteria();
    $c->add(HorarioPeer::DIA,$this->getRequestParameter('dia'));
    $c->add(HorarioPeer::HORA,$this->getRequestParameter('hora'));
    $c->add(HorarioPeer::PROFESOR_ID,$profesor->getId());
    
    $horarioex = HorarioPeer::doSelectOne($c);
    
    if ($horarioex)
    {
      $mensaje = 'Este hueco está ocupado.';        
      return $this->redirect('principal/error?mensaje='.$mensaje);
    }
    else
    {
      $horario->setDia($this->getRequestParameter('dia'));
      $horario->setHora($this->getRequestParameter('hora'));
      $horario->save();
      $this->getUser()->setAttribute('horario',true);
      return $this->redirect('horario/completo');
     
    }
    
  }
  
  public function executeError()
  {
  
  }

  public function executeDelete()
  {
    $horario = HorarioPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($horario);

    $horario->delete();
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->add(HorarioPeer::PROFESOR_ID,$this->profesor->getId());
    $horario = HorarioPeer::doSelect($c);
        
    if (count($horario) > 0)
    {
      $this->getUser()->setAttribute('horario',true);        
    }
    else
    {
      $this->getUser()->setAttribute('horario',false);
    }

    return $this->redirect('horario/completo');
  }
}
