<?php

/*
  This file is part of iTutor.
  Copyright (C) 2008 Oihane Garcia Bolumburu <oihaneg@gmail.com>
  Copyright (C) 2008 Ion Jaureguialzo Sarasola <widemos@gmail.com>

  iTutor is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  iTutor is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with iTutor. If not, see <http://www.gnu.org/licenses/>.
*/

?>
<?php
// auto-generated by sfPropelCrud
// date: 2008/03/07 19:49:43
?>
<?php

/**
 * falta actions.
 *
 * @package    gesal
 * @subpackage falta
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class faltaActions extends sfActions
{
  public function executeIndex()
  {
    
    $c= new Criteria();
    $c->add(ProfesorPeer::CODIGO, $this->getUser()->getAttribute('codigo'));
    $this->profesor = ProfesorPeer::doSelectOne($c);
    
    $d = new Criteria();
   $d->add(HoraperfilPeer::PERFIL_ID,$this->profesor->getPerfilId());
   $d->addJoin(HoraperfilPeer::HORA_ID,HoraPeer::ID);
   $d->addAscendingOrderByColumn(HoraperfilPeer::ORDEN);
   
    $this->horas = HoraPeer::doSelect($d); 
    
    $d = new Criteria();
    $d->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());   
    $this->horarios = HorarioPeer::doSelect($d);
    
    $this->asignaturas = AsignaturaPeer::doSelect(new Criteria());
    $this->grupos = GrupoPeer::doSelect (new Criteria());
    
    $this->fecha = getdate($this->getRequestParameter('fecha'));
    
    $this->festivos = FestivoPeer::doSelect(new Criteria());
   
  }
  
   public function executeGrupolisteval()
  {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);

    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
   
    
    $this->d = new Criteria();
    $this->d->addJoin(HorarioPeer::ASIGNATURA_ID,AsignaturaPeer::ID);
    $this->d->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->d->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    
  }
  
  public function executeGrupoev()
  {
    $fecha = strtotime("now");

    $c = new Criteria();
    $c->add(EvaluacionPeer::FECHAINI,$fecha,Criteria::LESS_EQUAL);
    $c->add(EvaluacionPeer::FECHAFIN,$fecha,Criteria::GREATER_EQUAL);
    $c->add(GrupoevaluacionPeer::GRUPO_ID, $this->getRequestParameter('grupo_id'));
    $c->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
    $this->eva_actual = EvaluacionPeer::doSelectOne($c);

    $this->a = new Criteria();
    $this->a->add(GrupoevaluacionPeer::GRUPO_ID, $this->getRequestParameter('grupo_id'));
    $this->a->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
 
  }

  public function executeTabla()
  {
    $this->fecha = $this->getRequestParameter('fecha');
    $this->dia = $this->getRequestParameter('dia');

    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));

    $this->profesor = ProfesorPeer::doSelectOne($d);

    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->add(HorarioPeer::DIA,$this->dia);
    $this->c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);

    $this->grupos = GrupoPeer::doSelect($this->c);

    $d = new Criteria();
    $d->add(GrupoPeer::PROFESOR_ID,$this->profesor->getId());

    $this->grupo = GrupoPeer::doSelectOne($d);



  }

  public function executeTablalist()
  {
    $c = new Criteria();
    $f = $this->getRequestParameter('fecha');
    $this->fecha = date('Y-m-d',$f);

    $this->grupo = $this->getRequestParameter('grupo');
    $this->dia = $this->getRequestParameter('dia');
    $this->tutor = $this->getRequestParameter('tutor');


    $c->add(GrupoevaluacionPeer::GRUPO_ID, $this->grupo);
    $c->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
    $c->add(EvaluacionPeer::FECHAINI,$this->fecha,Criteria::LESS_EQUAL);
    $c->add(EvaluacionPeer::FECHAFIN,$this->fecha,Criteria::GREATER_EQUAL);
    $this->evaluacion = EvaluacionPeer::doSelectOne($c);

    $c = new Criteria();
    $c->addJoin(AsignaturaPeer::ID,HorarioPeer::ASIGNATURA_ID);
    $c->add(HorarioPeer::GRUPO_ID,$this->grupo);
    $c->add(HorarioPeer::DIA,$this->dia);
    $c->setDistinct();
    $this->asignaturas = AsignaturaPeer::doSelect($c);

    $c = new Criteria();
    $c->add(HorarioPeer::GRUPO_ID,$this->grupo);
    $c->add(HorarioPeer::DIA,$this->dia);
    $c->addAscendingOrderByColumn(HorarioPeer::HORA);
    $this->horarios = HorarioPeer::doSelect($c);

    $c = new Criteria();
    $c->add(FaltaPeer::DIA, $this->dia);
    $c->add(FaltaPeer::EVALUACION_ID,$this->evaluacion->getId());
    $c->add(FaltaPeer::FECHA,$this->fecha);
    $c->addJoin(FaltaPeer::ALUMNO_ID,AlumnoPeer::ID);
    $c->add(AlumnoPeer::GRUPO_ID,$this->grupo);
    $this->faltas = FaltaPeer::doSelect($c);

    $c = new Criteria();
    $c->add(RetrasoPeer::DIA, $this->getRequestParameter('dia'));
    $c->add(RetrasoPeer::EVALUACION_ID,$this->evaluacion->getId());
    $c->add(RetrasoPeer::FECHA,$this->fecha);
    $c->addJoin(RetrasoPeer::ALUMNO_ID,AlumnoPeer::ID);
    $c->add(AlumnoPeer::GRUPO_ID,$this->grupo);
    $this->retrasos = RetrasoPeer::doSelect($c);

    $d = new Criteria();
    $d->add(AlumnoPeer::GRUPO_ID, $this->grupo);
    $d->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    $this->alumnos = AlumnoPeer::doSelect($d);
      
  }
  
  //Tabla para insertar o modificar las faltas de los alumnos 
  //en un dÃ­a y asignatura concretos.
  
  public function executeTablafaltas()
  {
    $c = new Criteria();
    $f = $this->getRequestParameter('fecha');
    $this->fecha = date('Y-m-d',$f);

    $this->grupo = $this->getRequestParameter('grupo');
    $this->dia = $this->getRequestParameter('dia');
    $this->hora = $this->getRequestParameter('hora');

    $c->add(GrupoevaluacionPeer::GRUPO_ID, $this->grupo);
    $c->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
    $c->add(EvaluacionPeer::FECHAINI,$this->fecha,Criteria::LESS_EQUAL);
    $c->add(EvaluacionPeer::FECHAFIN,$this->fecha,Criteria::GREATER_EQUAL);
    $this->evaluacion = EvaluacionPeer::doSelectOne($c);
        
    $this->asignatura = $this->getRequestParameter('asignatura');
    $this->asig = AsignaturaPeer::retrieveByPk($this->asignatura); 
    
    $c = new Criteria();
    $c->add(FaltaPeer::DIA, $this->getRequestParameter('dia')); 
    $c->add(FaltaPeer::HORA, $this->getRequestParameter('hora')); 
    $c->add(FaltaPeer::EVALUACION_ID,$this->evaluacion->getId());
    $c->add(FaltaPeer::ASIGNATURA_ID,$this->asig->getId());
    $c->add(FaltaPeer::FECHA,$this->fecha);
    $this->faltas = FaltaPeer::doSelect($c);
    
    $c = new Criteria();
    $c->add(RetrasoPeer::DIA, $this->getRequestParameter('dia')); 
    $c->add(RetrasoPeer::HORA, $this->getRequestParameter('hora')); 
    $c->add(RetrasoPeer::EVALUACION_ID,$this->evaluacion->getId());
    $c->add(RetrasoPeer::ASIGNATURA_ID,$this->asig->getId());
    $c->add(RetrasoPeer::FECHA,$this->fecha);
    $this->retrasos = RetrasoPeer::doSelect($c); 
    
    $d = new Criteria();
    $d->add(AlumnoPeer::GRUPO_ID, $this->getRequestParameter('grupo')); 
    $d->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);   
    $this->alumnos = AlumnoPeer::doSelect($d);
    
  }
  
  public function executeSalvartodo()
  {
      $grupo = $this->getRequestParameter('grupo');
      $dia = $this->getRequestParameter('dia');
      $evaluacion = $this->getRequestParameter('evaluacion');
      $f = $this->getRequestParameter('fecha');
      $fecha = date('y-m-d',$f);

      $d = new Criteria();
      $d->add(AlumnoPeer::GRUPO_ID, $grupo);
      $d->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
      $alumnos = AlumnoPeer::doSelect($d);

      $c = new Criteria();
      $c->addJoin(AsignaturaPeer::ID,HorarioPeer::ASIGNATURA_ID);
      $c->add(HorarioPeer::GRUPO_ID,$grupo);
      $c->add(HorarioPeer::DIA,$dia);
      $c->setDistinct();
      $asignaturas = AsignaturaPeer::doSelect($c);

      $c = new Criteria();
      $c->add(HorarioPeer::GRUPO_ID,$grupo);
      $c->add(HorarioPeer::DIA,$dia);
      $c->addAscendingOrderByColumn(HorarioPeer::HORA);
      $horarios = HorarioPeer::doSelect($c); 

      foreach ($alumnos as $alumno):
          foreach ($horarios as $horario):
             $campo = $this->getRequestParameter('f'.$alumno->getId().$horario->getHora());
             if ($campo == "")
             {
                 //delete de faltas y de retrasos
                 $c = new Criteria();
                 $c->add(FaltaPeer::ALUMNO_ID,$alumno->getId());
                 $c->add(FaltaPeer::FECHA,$fecha);
                 $c->add(FaltaPeer::HORA,$horario->getHora());

                 $falta = FaltaPeer::doSelectOne($c);

                 if ($falta)
                 {
                     $falta->delete();
                 }
                 $c = new Criteria();
                 $c->add(RetrasoPeer::ALUMNO_ID,$alumno->getId());
                 $c->add(RetrasoPeer::FECHA,$fecha);
                 $c->add(RetrasoPeer::HORA,$horario->getHora());

                 $retraso = RetrasoPeer::doSelectOne($c);

                 if ($retraso)
                 {
                     $retraso->delete();
                 }
             }
             if ($campo == "f")
             {
                 //delete de retrasos
                 //insert de faltas
                 $c = new Criteria();
                 $c->add(RetrasoPeer::ALUMNO_ID,$alumno->getId());
                 $c->add(RetrasoPeer::FECHA,$fecha);
                 $c->add(RetrasoPeer::HORA,$horario->getHora());

                 $retraso = RetrasoPeer::doSelectOne($c);

                 if ($retraso)
                 {
                     $retraso->delete();
                 }

                 $c = new Criteria();
                 $c->add(FaltaPeer::ALUMNO_ID,$alumno->getId());
                 $c->add(FaltaPeer::FECHA,$fecha);
                 $c->add(FaltaPeer::HORA,$horario->getHora());

                 $falta = FaltaPeer::doSelectOne($c);
             
                 if (!$falta)
                 {
                     $falta=new Falta();
                     $falta->setEvaluacionId($this->getRequestParameter('evaluacion') ? $this->getRequestParameter('evaluacion') : null);
                     $falta->setAlumnoId($alumno->getId());
                     $falta->setAsignaturaId($horario->getAsignaturaId());
                     $falta->setDia($this->getRequestParameter('dia'));
                     $falta->setHora($horario->getHora());
                     $f = date ('Y-m-d',$this->getRequestParameter('fecha'));
                     $falta->setFecha($f);
                     $falta->setJustificado($this->getRequestParameter('j'.$alumno->getId().$horario->gethora(), 0));
                     
                     $falta->save();
                 }
                 else
                 {
                     $falta->setJustificado($this->getRequestParameter('j'.$alumno->getId().$horario->gethora(), 0));

                     $falta->save();
                 }

             }
             if ($campo == "r")
             {
                 //delete de faltas
                 //insert de retrasos
                 $c = new Criteria();
                 $c->add(FaltaPeer::ALUMNO_ID,$alumno->getId());
                 $c->add(FaltaPeer::FECHA,$fecha);
                 $c->add(FaltaPeer::HORA,$horario->getHora());

                 $falta = FaltaPeer::doSelectOne($c);
        

                 if ($falta)
                 {
                     $falta->delete();
                 }

                 $c = new Criteria();
                 $c->add(RetrasoPeer::ALUMNO_ID,$alumno->getId());
                 $c->add(RetrasoPeer::FECHA,$fecha);
                 $c->add(RetrasoPeer::HORA,$horario->getHora());

                 $retraso = RetrasoPeer::doSelectOne($c);

                 if (!$retraso)
                 {
                     $retraso=new Retraso();
                     $retraso->setEvaluacionId($this->getRequestParameter('evaluacion') ? $this->getRequestParameter('evaluacion') : null);
                     $retraso->setAlumnoId($alumno->getId());
                     $retraso->setAsignaturaId($horario->getAsignaturaId());
                     $retraso->setDia($this->getRequestParameter('dia'));
                     $retraso->setHora($horario->getHora());
                     $f = date ('Y-m-d',$this->getRequestParameter('fecha'));
                     $retraso->setFecha($f);
                     $retraso->setJustificado($this->getRequestParameter('j'.$alumno->getId().$horario->gethora(), 0));

                     $retraso->save();
                 }
                 else
                 {
                     $retraso->setJustificado($this->getRequestParameter('j'.$alumno->getId().$horario->gethora(), 0));

                     $retraso->save();
                 }

             }
          endforeach;
      endforeach;

      return $this->redirect('falta/index?fecha='.$this->getRequestParameter('fecha'));
  }

  //Guarda los cambios realizados en la tabla de faltas
  
  public function executeSalvar()
  {
    $d = new Criteria();
    $d->add(AlumnoPeer::GRUPO_ID, $this->getRequestParameter('grupo')); 
    $d->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);   
    $alumnos = AlumnoPeer::doSelect($d);
    
    $f = $this->getRequestParameter('fecha');
    $this->fecha = date('y-m-d',$f);
    
    $c = new Criteria();
    $c->add(FaltaPeer::DIA, $this->getRequestParameter('dia')); 
    $c->add(FaltaPeer::HORA, $this->getRequestParameter('hora')); 
    $c->add(FaltaPeer::EVALUACION_ID,$this->getRequestParameter('evaluacion'));
    $c->add(FaltaPeer::ASIGNATURA_ID,$this->getRequestParameter('asignatura'));
    $c->add(FaltaPeer::FECHA,$this->fecha);
    $faltas = FaltaPeer::doSelect($c);
    
    $c = new Criteria();
    $c->add(RetrasoPeer::DIA, $this->getRequestParameter('dia')); 
    $c->add(RetrasoPeer::HORA, $this->getRequestParameter('hora')); 
    $c->add(RetrasoPeer::EVALUACION_ID,$this->getRequestParameter('evaluacion'));
    $c->add(RetrasoPeer::ASIGNATURA_ID,$this->getRequestParameter('asignatura'));
    $c->add(RetrasoPeer::FECHA,$this->fecha);
    $retrasos = RetrasoPeer::doSelect($c);
    
    foreach ($alumnos as $alumno):
      $fa = $this->getRequestParameter('falta'.$alumno->getId());
      
      if ($fa == 1)
      {  
        $id = 0;
        foreach ($faltas as $falta):
          if ($alumno->getId() == $falta->getAlumnoId())
          {
            $id = $falta->getId();         
          }
        endforeach;  
        
        foreach ($retrasos as $retraso):
          if ($alumno->getId() == $retraso->getAlumnoId())
          {
            $retraso->delete();        
          }
        endforeach; 
        
        if ($id == 0)
        {
          $falta = new Falta();
        }
        else
        {
          $falta = FaltaPeer::retrieveByPk($id);
          $this->forward404Unless($falta);
        }
        $falta->setEvaluacionId($this->getRequestParameter('evaluacion') ? $this->getRequestParameter('evaluacion') : null);
        $falta->setAlumnoId($alumno->getId());
        $falta->setAsignaturaId($this->getRequestParameter('asignatura') ? $this->getRequestParameter('asignatura') : null);
        $falta->setDia($this->getRequestParameter('dia'));
        $falta->setHora($this->getRequestParameter('hora'));
        $fecha = date ('Y-m-d',$this->getRequestParameter('fecha'));
        $falta->setFecha($fecha);  
        $falta->setJustificado($this->getRequestParameter('justificado'.$alumno->getId(), 0));
        $falta->setObservaciones($this->getRequestParameter('observaciones'.$alumno->getId()));
        $falta->setActivo($this->getRequestParameter('activo'.$alumno->getId(), 0)); 
        
        $falta->save();
      }
    else if ($fa == 2)
    {
      $id = 0;
      foreach ($retrasos as $retraso):
        if ($alumno->getId() == $retraso->getAlumnoId())
        {
          $id = $retraso->getId();         
        }
      endforeach; 
      
      foreach ($faltas as $falta):
          if ($alumno->getId() == $falta->getAlumnoId())
          {
            $falta->delete();        
          }
      endforeach; 
        
      if ($id == 0)
      {
        $retraso = new Retraso();
      }
      else
      {
        $retraso = RetrasoPeer::retrieveByPk($id);
        $this->forward404Unless($retraso);
      }
      $retraso->setEvaluacionId($this->getRequestParameter('evaluacion') ? $this->getRequestParameter('evaluacion') : null);
      $retraso->setAlumnoId($alumno->getId());
      $retraso->setAsignaturaId($this->getRequestParameter('asignatura') ? $this->getRequestParameter('asignatura') : null);
      $retraso->setDia($this->getRequestParameter('dia'));
      $retraso->setHora($this->getRequestParameter('hora'));
      $fecha = date ('Y-m-d',$this->getRequestParameter('fecha'));
      $retraso->setFecha($fecha);  
      $retraso->setJustificado($this->getRequestParameter('justificado'.$alumno->getId(), 0));
      $retraso->setObservaciones($this->getRequestParameter('observaciones'.$alumno->getId()));
      $retraso->setActivo($this->getRequestParameter('activo'.$alumno->getId(), 0)); 
       
      $retraso->save();
    }
    else
    {
      foreach ($retrasos as $retraso):
        if ($alumno->getId() == $retraso->getAlumnoId())
        {
          $retraso->delete();         
        }
      endforeach; 
      
      foreach ($faltas as $falta):
        if ($alumno->getId() == $falta->getAlumnoId())
        {
          $falta->delete();        
        }
      endforeach;     
    }
    endforeach;
    
    return $this->redirect('falta/index?fecha='.$this->getRequestParameter('fecha'));
  }
  
  //Limpia los campos de una fila de la tabla
  
  public function executeLimpiar()
  {
    $this->alumno = AlumnoPeer::retrieveByPk($this->getRequestParameter('id'));  
  }

  public function executeLimp()
  {
    $this->alumno = $this->getRequestParameter('id');

    $this->hora = $this->getRequestParameter('hora');

  }
  
  public function executeTotalgrupolist()
  {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    
    $this->grupos = GrupoPeer::doSelect($this->c);
    $this->fecha = $this->getRequestParameter('fecha'); 
  }
  
  public function executeFechasgrupolist()
  {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    
    $this->grupos = GrupoPeer::doSelect($this->c);
    $this->fecha = $this->getRequestParameter('fecha'); 
  }
  
  //Listado total por asignatura y evaluaciÃ³n (primer paso)
  
  public function executeTotalasiggrupolist()
  {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    
    $this->grupos = GrupoPeer::doSelect($this->c);
    $this->fecha = $this->getRequestParameter('fecha'); 
  }
  
  //Listado total por asignatura y evaluciÃ³n (segundo paso)
  
  public function executeTotalasigalumnolist()
  {
    $this->fecha = $this->getRequestParameter('fecha');
    $this->grupo = $this->getRequestParameter('grupo_id'); 
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $fecha = strtotime("now");
    
    $c = new Criteria();
    $c->add(EvaluacionPeer::FECHAINI,$fecha,Criteria::LESS_EQUAL);
    $c->add(EvaluacionPeer::FECHAFIN,$fecha,Criteria::GREATER_EQUAL);
    $c->add(GrupoevaluacionPeer::GRUPO_ID, $this->grupo);
    $c->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
    $this->eva_actual = EvaluacionPeer::doSelectOne($c);


    $this->a = new Criteria();
    $this->a->add(GrupoevaluacionPeer::GRUPO_ID, $this->grupo);
    $this->a->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);

    
    $this->c = new Criteria();
    $this->c->addJoin(AsignaturaPeer::ID,HorarioPeer::ASIGNATURA_ID);
    $this->c->add(HorarioPeer::GRUPO_ID,$this->grupo);
    $this->c->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    $this->c->setDistinct();
    
  }
  
  //Listado total por asignatura y evaluciÃ³n (tercer paso)
  
  public function executeTotalasigalumnolistado()
  {
    $this->fecha = $this->getRequestParameter('fecha');
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->add(FaltaPeer::EVALUACION_ID,$this->getRequestParameter('evaluacion_id'));
    $c->add(FaltaPeer::ASIGNATURA_ID,$this->getRequestParameter('asignatura_id'));
    $c->addJoin(FaltaPeer::ALUMNO_ID,AlumnoPeer::ID);
    $c->add(AlumnoPeer::GRUPO_ID,$this->getRequestParameter('grupo_id'));
    $c->addAscendingOrderByColumn(FaltaPeer::FECHA,FaltaPeer::HORA);
    
    $this->faltas = FaltaPeer::doSelect($c);
       
    $c = new Criteria();
    $c->add(RetrasoPeer::EVALUACION_ID,$this->getRequestParameter('evaluacion_id'));
    $c->add(RetrasoPeer::ASIGNATURA_ID,$this->getRequestParameter('asignatura_id'));
    $c->addJoin(RetrasoPeer::ALUMNO_ID,AlumnoPeer::ID);
    $c->add(AlumnoPeer::GRUPO_ID,$this->getRequestParameter('grupo_id'));
    $c->addAscendingOrderByColumn(RetrasoPeer::FECHA,RetrasoPeer::HORA);
    
    $this->retrasos = RetrasoPeer::doSelect($c);
    
    $d = new Criteria();
    $d->add(AlumnoPeer::GRUPO_ID,$this->getRequestParameter('grupo_id'));
    $d->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    
    $this->alumnos = AlumnoPeer::doSelect($d);
    
    $this->asignatura = AsignaturaPeer::retrieveByPk($this->getRequestParameter('asignatura_id'));
    $this->evaluacion = EvaluacionPeer::retrieveByPk($this->getRequestParameter('evaluacion_id'));
  }
  
  //Listado por alumno y asignatura (primer paso)
  
  public function executeAsiggrupolist()
  {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    
    $this->grupos = GrupoPeer::doSelect($this->c);
    $this->fecha = $this->getRequestParameter('fecha'); 
  }
  
  //Listado por alumno y asignatura (segundo paso)
  
  public function executeAsigalumnolist()
  {
    $this->fecha = $this->getRequestParameter('fecha');
    $this->grupo = $this->getRequestParameter('grupo_id'); 
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $fecha = strtotime("now");
    
    $c = new Criteria();
    $c->add(EvaluacionPeer::FECHAINI,$fecha,Criteria::LESS_EQUAL);
    $c->add(EvaluacionPeer::FECHAFIN,$fecha,Criteria::GREATER_EQUAL);
    $c->add(GrupoevaluacionPeer::GRUPO_ID, $this->grupo);
    $c->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
    $this->eva_actual = EvaluacionPeer::doSelectOne($c);


    $this->a = new Criteria();
    $this->a->add(GrupoevaluacionPeer::GRUPO_ID, $this->grupo);
    $this->a->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);


    $this->c = new Criteria();
    $this->c->addJoin(AsignaturaPeer::ID,HorarioPeer::ASIGNATURA_ID);
    $this->c->add(HorarioPeer::GRUPO_ID,$this->grupo);
    $this->c->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    $this->c->setDistinct();
    
    $this->d = new Criteria();
    $this->d->add(AlumnoPeer::GRUPO_ID,$this->grupo);
    $this->d->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    
  }
  
  //Listado por alumno y asignatura (tercer paso)
  
  public function executeAsigalumnolistado()
  {
    $this->fecha = $this->getRequestParameter('fecha');
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->add(FaltaPeer::EVALUACION_ID,$this->getRequestParameter('evaluacion_id'));
    $c->add(FaltaPeer::ALUMNO_ID,$this->getRequestParameter('alumno_id'));
    $c->add(FaltaPeer::ASIGNATURA_ID,$this->getRequestParameter('asignatura_id'));
    $c->addAscendingOrderByColumn(FaltaPeer::FECHA,FaltaPeer::HORA);
    
    $this->faltas = FaltaPeer::doSelect($c);
       
    $c = new Criteria();
    $c->add(RetrasoPeer::EVALUACION_ID,$this->getRequestParameter('evaluacion_id'));
    $c->add(RetrasoPeer::ALUMNO_ID,$this->getRequestParameter('alumno_id'));
    $c->add(RetrasoPeer::ASIGNATURA_ID,$this->getRequestParameter('asignatura_id'));
    $c->addAscendingOrderByColumn(RetrasoPeer::FECHA,RetrasoPeer::HORA);
    
    $this->retrasos = RetrasoPeer::doSelect($c);
    
    $this->alumno = AlumnoPeer::retrieveByPk($this->getRequestParameter('alumno_id'));
    $this->asignatura = AsignaturaPeer::retrieveByPk($this->getRequestParameter('asignatura_id'));
    $this->evaluacion = EvaluacionPeer::retrieveByPk($this->getRequestParameter('evaluacion_id'));
  }
  
  public function executeGrupolist()
  {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    
    $this->grupos = GrupoPeer::doSelect($this->c); 
    $this->fecha = $this->getRequestParameter('fecha'); 
  }
  
   public function executeAlgrupolist()
  {
   $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    
    $this->grupos = GrupoPeer::doSelect($this->c); 
    $this->fecha = $this->getRequestParameter('fecha');   
  }
  
   public function executeRecgrupolist()
  {
   $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    
    $this->grupos = GrupoPeer::doSelect($this->c); 
    $this->fecha = $this->getRequestParameter('fecha');  
  }

  public function executeList()
  {
    $c = new Criteria();
    $c->add(FaltaPeer::DIA, $this->getRequestParameter('dia')); 
    $c->add(FaltaPeer::HORA, $this->getRequestParameter('hora')); 
    $this->faltas = FaltaPeer::doSelect($c);
    
    $d = new Criteria();
    $d->add(AlumnoPeer::GRUPO_ID, $this->getRequestParameter('grupo')); 
    $d->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);   
    $this->alumnos = AlumnoPeer::doSelect($d);
    
    $this->evaluaciones = EvaluacionPeer::doSelect(new Criteria());
    $this->fecha = $this->getRequestParameter('fecha');
    
    $this->dia = $this->getRequestParameter('dia');
    $this->hora = $this->getRequestParameter('hora');
    $this->asignatura = $this->getRequestParameter('asignatura');
    $this->asig = AsignaturaPeer::retrieveByPk($this->asignatura);
  }
  
  public function executeTotalalumnolist()
  {
   if (!$this->getRequestParameter('grupo_id'))
   {  
      $mensaje = 'No se puede visualizar el listado sin elegir un grupo.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $c->addJoin(AlumnoPeer::GRUPO_ID, GrupoPeer::ID); 
    $c->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    $c->setDistinct();
    
    $this->alumnos = AlumnoPeer::doSelect($c);
    
    $d = new Criteria();
    $d->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    
    $this->grupo = GrupoPeer::doSelectOne($d);

    $c = new Criteria();
    $c->add(GrupoevaluacionPeer::GRUPO_ID, $this->grupo->getId());
    $c->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
    $this->evaluaciones = EvaluacionPeer::doSelect($c);
    
    $e = new Criteria();
    $e->add(AlumnoPeer::GRUPO_ID,$this->getRequestParameter('grupo_id'));
    $e->addJoin(AlumnoPeer::ID, FaltaPeer::ALUMNO_ID);
    $e->addAscendingOrderByColumn(FaltaPeer::ALUMNO_ID);
    
    $this->faltas = FaltaPeer::doSelect($e);
    
    $e = new Criteria();
    $e->add(AlumnoPeer::GRUPO_ID,$this->getRequestParameter('grupo_id'));
    $e->addJoin(AlumnoPeer::ID, RetrasoPeer::ALUMNO_ID);
    $e->addAscendingOrderByColumn(RetrasoPeer::ALUMNO_ID);
    
    $this->retrasos = RetrasoPeer::doSelect($e);
    
    $this->fecha = $this->getRequestParameter('fecha');
   }
  }
  
  public function executeFechasalumnolist()
  {
   if (!$this->getRequestParameter('grupo_id'))
   {  
      $mensaje = 'No se puede visualizar el listado sin elegir un grupo.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->c = new Criteria();
    $this->c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $this->c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $this->c->addJoin(AlumnoPeer::GRUPO_ID, GrupoPeer::ID); 
    $this->c->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    
    $this->c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    $this->c->setDistinct();
    
    $this->fecha = $this->getRequestParameter('fecha');
   }
  }
  
  public function executeFechasalumnolistado()
  {
   if (!$this->getRequestParameter('alumno_id'))
   {  
      $mensaje = 'No se puede visualizar el listado sin elegir un alumno.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->add(AlumnoPeer::ID, $this->getRequestParameter('alumno_id'));
    
    $this->alumno = AlumnoPeer::doSelectOne($c);
    
    $c = new Criteria();
    $c->add(AsignaturaPeer::PROFESOR_ID,$this->profesor->getId());
    
    $this->asignaturas = AsignaturaPeer::doSelect($c);
    
    $c = new Criteria();
    $c->add(HorarioPeer::GRUPO_ID,$this->alumno->getGrupoId());
    
    $this->horarios = HorarioPeer::doSelect($c);
    
    $r = $this->getRequestParameter('fecha_ini');

    $date = explode("/",$r);
    $fechaini = date("Y-m-d",mktime(0,0,0,$date[1],$date[0],$date[2]))."\n";
    
    $r = $this->getRequestParameter('fecha_fin');

    $date = explode("/",$r);
    $fechafin = date("Y-m-d",mktime(0,0,0,$date[1],$date[0],$date[2]))."\n";
    
    $e = new Criteria(); 
    $e->add(FaltaPeer::ALUMNO_ID, $this->alumno->getId());
    $e->add(FaltaPeer::FECHA, $fechaini, Criteria::GREATER_EQUAL);
    $e->add(FaltaPeer::FECHA, $fechafin, Criteria::LESS_EQUAL);
    $e->addAscendingOrderByColumn(FaltaPeer::FECHA);
    $this->faltas = FaltaPeer::doSelect($e);
    
    $e = new Criteria();
    $e->add(RetrasoPeer::ALUMNO_ID, $this->alumno->getId());
    $e->add(RetrasoPeer::FECHA, $fechaini, Criteria::GREATER_EQUAL);
    $e->add(RetrasoPeer::FECHA, $fechafin, Criteria::LESS_EQUAL);
    $e->addAscendingOrderByColumn(RetrasoPeer::FECHA);
    
    $this->retrasos = RetrasoPeer::doSelect($e);
    
    $this->fecha = $this->getRequestParameter('fecha');
   }
  }

  //Esta funcion estÃ¡ modificada abajo
  ////////////////////////////////
  public function executeAlumnolist_antiguo()
  {
  if (!$this->getRequestParameter('grupo_id'))
   {
      $mensaje = 'No se puede visualizar el listado sin elegir un grupo.';
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));

    $this->profesor = ProfesorPeer::doSelectOne($d);

    $c = new Criteria();
    $c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $c->addJoin(AlumnoPeer::GRUPO_ID, GrupoPeer::ID);

    $c->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    $c->addAscendingOrderByColumn(AlumnoPeer::GRUPO_ID);
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    $c->setDistinct();

    $this->alumnos = AlumnoPeer::doSelect($c);

    $g = new Criteria();
    $g->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    $g->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $g->addJoin(HorarioPeer::ASIGNATURA_ID, AsignaturaPeer::ID);
    $g->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    $g->setDistinct();

    $this->asignaturas = AsignaturaPeer::doSelect($g);

    $this->grupo = GrupoPeer::retrieveByPk($this->getRequestParameter('grupo_id'));

    $e = new Criteria();
    $e->addAscendingOrderByColumn(FaltaPeer::FECHA);

    $this->faltas = FaltaPeer::doSelect($e);
    $this->evaluaciones = EvaluacionPeer::doSelect(new Criteria());

    $this->fecha = $this->getRequestParameter('fecha');
    }

  }
  
  public function executeAlumnolist()
  {
  if (!$this->getRequestParameter('grupo_id'))
   {  
      $mensaje = 'No se puede visualizar el listado sin elegir un grupo.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria(); 

    $c->add(AlumnoPeer::GRUPO_ID, $this->getRequestParameter('grupo_id'));
    $c->addAscendingOrderByColumn(AlumnoPeer::GRUPO_ID);
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);

    $this->alumnos = AlumnoPeer::doSelect($c);
    
    $g = new Criteria();
    $g->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    $g->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $g->addJoin(HorarioPeer::ASIGNATURA_ID, AsignaturaPeer::ID); 
    $g->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    $g->setDistinct();
    
    $this->asignaturas = AsignaturaPeer::doSelect($g);
    
    $this->grupo = GrupoPeer::retrieveByPk($this->getRequestParameter('grupo_id'));
    
    $e = new Criteria();
    $e->addAscendingOrderByColumn(FaltaPeer::FECHA);
    $e->addAscendingOrderByColumn(FaltaPeer::HORA);
    $e->addJoin(FaltaPeer::ASIGNATURA_ID,AsignaturaPeer::ID);
    $e->addJoin(AsignaturaPeer::ID,HorarioPeer::ASIGNATURA_ID);
    $e->add(HorarioPeer::GRUPO_ID,$this->getRequestParameter('grupo_id'));
    $e->setDistinct();
    
    $this->faltas = FaltaPeer::doSelect($e);

    $c = new Criteria();
    $c->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
    $c->addJoin(GrupoPeer::ID,GrupoevaluacionPeer::GRUPO_ID);
    $c->add(GrupoPeer::ID,$this->getRequestParameter('grupo_id'));
    $this->evaluaciones = EvaluacionPeer::doSelect($c);
    
    $this->fecha = $this->getRequestParameter('fecha');
    } 
    
  }
  
  public function executeAlumnolisteval()
  {
  if (!$this->getRequestParameter('grupo_id'))
   {  
      $mensaje = 'No se puede visualizar el listado sin elegir un grupo.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria(); 

    $c->add(AlumnoPeer::GRUPO_ID, $this->getRequestParameter('grupo_id'));
    $c->addAscendingOrderByColumn(AlumnoPeer::GRUPO_ID);
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);

    $this->alumnos = AlumnoPeer::doSelect($c);
    
    $g = new Criteria();
    $g->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    $g->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $g->addJoin(HorarioPeer::ASIGNATURA_ID, AsignaturaPeer::ID); 
    $g->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    $g->setDistinct();
    
    $this->asignaturas = AsignaturaPeer::doSelect($g);
    
    $this->grupo = GrupoPeer::retrieveByPk($this->getRequestParameter('grupo_id'));
    
    $e = new Criteria();
    $e->addAscendingOrderByColumn(FaltaPeer::FECHA);
    $e->addAscendingOrderByColumn(FaltaPeer::HORA);
    $e->addJoin(FaltaPeer::ASIGNATURA_ID,AsignaturaPeer::ID);
    $e->addJoin(AsignaturaPeer::ID,HorarioPeer::ASIGNATURA_ID);
    $e->add(HorarioPeer::GRUPO_ID,$this->getRequestParameter('grupo_id'));
    $e->add(FaltaPeer::EVALUACION_ID,$this->getRequestParameter('evaluacion_id'));
    $e->setDistinct();
    
    $this->faltas = FaltaPeer::doSelect($e);

    $this->evaluacion = EvaluacionPeer::retrieveByPK($this->getRequestParameter('evaluacion_id'));
    
    $this->fecha = $this->getRequestParameter('fecha');
    } 
    
  }
  
    public function executeAlalumnolistfaltas()
  {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
      
    $g = new Criteria();
    $g->add(GrupoPeer::ID, $this->getRequestParameter('grupo'));
    $g->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $g->addJoin(HorarioPeer::ASIGNATURA_ID, AsignaturaPeer::ID); 
    $g->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    $g->setDistinct();
    
    $this->asignaturas = AsignaturaPeer::doSelect($g);
    
    
    
    $this->alumno = AlumnoPeer::retrieveByPk($this->getRequestParameter('alumno'));
    $this->grupo = GrupoPeer::retrieveByPk($this->getRequestParameter('grupo'));
    $c = new Criteria();
    $c->add(FaltaPeer::ALUMNO_ID,$this->getRequestParameter('alumno'));
    $c->add(FaltaPeer::EVALUACION_ID,$this->getRequestParameter('evaluacion'));
    $c->addAscendingOrderByColumn(FaltaPeer::FECHA);
    $this->faltas = FaltaPeer::doSelect($c);
    $this->evaluacion = EvaluacionPeer::retrieveByPk($this->getRequestParameter('evaluacion'));
    $this->fecha = $this->getRequestParameter('fecha'); 

  }
  
   public function executeAlalumnolist()
  {
  if (!$this->getRequestParameter('grupo_id'))
   {
      $mensaje = 'No se puede visualizar el listado sin elegir un grupo.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $c->addJoin(AlumnoPeer::GRUPO_ID, GrupoPeer::ID); 
    $c->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    
    $c->addAscendingOrderByColumn(AlumnoPeer::GRUPO_ID);
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    $c->setDistinct();    

    $this->alumnos = AlumnoPeer::doSelect($c);
    $this->grupo = GrupoPeer::retrieveByPk($this->getRequestParameter('grupo_id'));
    $a = new Criteria();
    $a->add(GrupoevaluacionPeer::GRUPO_ID, $this->grupo->getId());
    $a->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
    $this->evaluaciones = EvaluacionPeer::doSelect($a);
    
    $this->fecha = $this->getRequestParameter('fecha'); 
    }
    
  }
  
 public function executeRecalumnolist()
  {
  if (!$this->getRequestParameter('grupo_id'))
   {
      $mensaje = 'No se puede visualizar el listado sin elegir un grupo.';    
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $c->addJoin(AlumnoPeer::GRUPO_ID, GrupoPeer::ID); 
    $c->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    
    $c->addAscendingOrderByColumn(AlumnoPeer::GRUPO_ID);
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    $c->setDistinct();
    
    $g = new Criteria();
    $g->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    $g->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $g->addJoin(HorarioPeer::ASIGNATURA_ID, AsignaturaPeer::ID); 
    $g->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    $g->setDistinct();
    
    $this->asignaturas = AsignaturaPeer::doSelect($g);
    
    
    
    $this->alumnos = AlumnoPeer::doSelect($c);
    $this->grupo = GrupoPeer::retrieveByPk($this->getRequestParameter('grupo_id'));
    $this->faltas = FaltaPeer::doSelect(new Criteria());
    $a = new Criteria();
    $a->add(GrupoevaluacionPeer::GRUPO_ID, $this->grupo->getId());
    $a->addJoin(EvaluacionPeer::ID,GrupoevaluacionPeer::EVALUACION_ID);
    $this->evaluaciones = EvaluacionPeer::doSelect($a);
    
    $this->fecha = $this->getRequestParameter('fecha');
    }
  }
  
  public function executeTotal()
  {
    $c = new Criteria();
    $c->add(FaltaPeer::ALUMNO_ID, $this->getRequestParameter('alumno')); 
    $c->addAscendingOrderByColumn(FaltaPeer::FECHA);
    $c->addAscendingOrderByColumn(FaltaPeer::HORA);
    $c->addAscendingOrderByColumn(FaltaPeer::ASIGNATURA_ID);
    $this->faltas = FaltaPeer::doSelect($c);
    
    $d=new Criteria();
    $d->add(AlumnoPeer::ID, $this->getRequestParameter('alumno')); 
    $this->alumno = AlumnoPeer::doSelectOne($d);
    
    $this->evaluaciones = EvaluacionPeer::doSelect(new Criteria());
    
    $this->dia = $this->getRequestParameter('dia');
    $this->hora = $this->getRequestParameter('hora');
    $this->asignatura = $this->getRequestParameter('asignatura');
    $this->asig = AsignaturaPeer::retrieveByPk($this->asignatura);
    $this->fecha = $this->getRequestParameter('fecha');
    
    $this->setTemplate('faltas');
  }
  
  public function executeFaltas()
  {
    $c = new Criteria();
    $c->add(FaltaPeer::ALUMNO_ID, $this->getRequestParameter('alumno')); 
    $c->add(FaltaPeer::DIA, $this->getRequestParameter('dia'));
    $c->add(FaltaPeer::HORA, $this->getRequestParameter('hora'));
    $c->addAscendingOrderByColumn(FaltaPeer::FECHA); 
    $c->addAscendingOrderByColumn(FaltaPeer::ASIGNATURA_ID);
    $this->faltas = FaltaPeer::doSelect($c);
    
    $d=new Criteria();
    $d->add(AlumnoPeer::ID, $this->getRequestParameter('alumno')); 
    $this->alumno = AlumnoPeer::doSelectOne($d);
    
    $this->evaluaciones = EvaluacionPeer::doSelect(new Criteria());
    
    $this->dia = $this->getRequestParameter('dia');
    $this->hora = $this->getRequestParameter('hora');
    $this->asignatura = $this->getRequestParameter('asignatura');
    $this->asig = AsignaturaPeer::retrieveByPk($this->asignatura);
    $this->fecha = $this->getRequestParameter('fecha');
    
  }

  public function executeShow()
  {
    $this->falta = FaltaPeer::retrieveByPk($this->getRequestParameter('id'));
    
    $d=new Criteria();
    $d->add(AlumnoPeer::ID, $this->falta->getAlumnoId()); 
    $this->alumno = AlumnoPeer::doSelectOne($d);
    
    $this->evaluaciones = EvaluacionPeer::doSelect(new Criteria());
    
    $this->dia = $this->falta->getDia();
    $this->hora = $this->falta->getHora();
    $this->asignatura = $this->falta->getAsignaturaId();
    $this->asig = AsignaturaPeer::retrieveByPk($this->asignatura);
    $this->fecha = $this->getRequestParameter('fecha');
    $this->forward404Unless($this->falta);
  }

  public function executeCreate()
  {
    $this->falta = new Falta();
    
    $d = new Criteria();
    $d->add(AlumnoPeer::ID, $this->getRequestParameter('alumno'));   
    $this->alumno = AlumnoPeer::doSelectOne($d);
 
    $this->dia = $this->getRequestParameter('dia');
    $this->hora = $this->getRequestParameter('hora');
    $this->asignatura = $this->getRequestParameter('asignatura');
    $this->asig = AsignaturaPeer::retrieveByPk($this->asignatura);
    $this->fecha = date('Y-m-d',$this->getRequestParameter('fecha'));
    
    $c = new Criteria();
    $c->add(EvaluacionPeer::FECHAINI,$this->fecha,Criteria::LESS_EQUAL);
    $c->add(EvaluacionPeer::FECHAFIN,$this->fecha,Criteria::GREATER_EQUAL);
    
    $this->evaluacion = EvaluacionPeer::doSelectOne($c);
    
    $this->crear = true;
    
    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->falta = FaltaPeer::retrieveByPk($this->getRequestParameter('id'));
    $d = new Criteria();
    $d->add(AlumnoPeer::ID, $this->falta->getAlumnoId());   
    $this->alumno = AlumnoPeer::doSelectOne($d);
 
    $this->dia = $this->falta->getDia();
    $this->hora = $this->falta->getHora();
    $this->asignatura = $this->falta->getAsignaturaId();
    
    $this->fecha = $this->falta->getFecha();
    
    $c = new Criteria();
    $c->add(EvaluacionPeer::FECHAINI,$this->fecha,Criteria::LESS_EQUAL);
    $c->add(EvaluacionPeer::FECHAFIN,$this->fecha,Criteria::GREATER_EQUAL);
    
    $this->evaluacion = EvaluacionPeer::doSelectOne($c);
    
    $this->asig = AsignaturaPeer::retrieveByPk($this->asignatura);
    
    $this->crear = $this->getRequestParameter('crear');
    if (!$this->crear)
    {
      $this->crear = false;  
    }
    $this->forward404Unless($this->falta);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $falta = new Falta();
    }
    else
    {
      $falta = FaltaPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($falta);
    }

    $falta->setId($this->getRequestParameter('id'));
    $falta->setEvaluacionId($this->getRequestParameter('evaluacion_id') ? $this->getRequestParameter('evaluacion_id') : null);
    $falta->setAlumnoId($this->getRequestParameter('alumno_id') ? $this->getRequestParameter('alumno_id') : null);
    $falta->setAsignaturaId($this->getRequestParameter('asignatura_id') ? $this->getRequestParameter('asignatura_id') : null);
    $falta->setDia($this->getRequestParameter('dia'));
    $falta->setHora($this->getRequestParameter('hora'));
    $falta->setFecha($this->getRequestParameter('fecha'));
    $fecha = $falta->getFecha();   
    $falta->setJustificado($this->getRequestParameter('justificado', 0));
    $falta->setObservaciones($this->getRequestParameter('observaciones'));
    $falta->setActivo($this->getRequestParameter('activo', 0));
    
    if ($this->getRequestParameter('crear'))
    { 
     
    $c = new Criteria();
    $c->add(FaltaPeer::DIA,$this->getRequestParameter('dia'));
    $c->add(FaltaPeer::HORA,$this->getRequestParameter('hora'));
    $c->add(FaltaPeer::FECHA,$fecha);
    $c->add(FaltaPeer::ALUMNO_ID,$this->getRequestParameter('alumno_id'));
    
    $faltaex = FaltaPeer::doSelectOne($c);
    
    if ($faltaex)
    {
      $mensaje = 'Ya existe una falta para ese alumno en esa fecha a esa hora.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
    }
    else
    {
      $falta->save();
      return $this->redirect('falta/show?id='.$falta->getId());
     
    }
    }
    else
    {
      $falta->save();
      return $this->redirect('falta/show?id='.$falta->getId());
    }
       
  }
  
  public function executeError()
  {
  
  }

  public function executeDelete()
  {
    $falta = FaltaPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($falta);
    $fecha = $this->getRequestParameter('fecha');

    $falta->delete();

    return $this->redirect('falta/list?fecha='.$fecha);
  }
}
