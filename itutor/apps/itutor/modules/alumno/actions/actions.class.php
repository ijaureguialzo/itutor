<?php

/*
  This file is part of iTutor.
  Copyright (C) 2008 Oihane Garcia Bolumburu <oihaneg@gmail.com>
  Copyright (C) 2008 Ion Jaureguialzo Sarasola <widemos@gmail.com>

  iTutor is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  iTutor is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with iTutor. If not, see <http://www.gnu.org/licenses/>.
*/

?>
<?php
// auto-generated by sfPropelCrud
// date: 2008/03/07 16:51:05
?>
<?php

/**
 * alumno actions.
 *
 * @package    gesal
 * @subpackage alumno
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class alumnoActions extends sfActions
{

  public function executeIndex()
  {
  
     $permisos=$this->getUser()->getPermissions();
     foreach ($permisos as $permiso):
     if ($permiso == "admin")
     {
        $this->getUser()->setAttribute('admin',true);
     }
     endforeach; 
       
      if ($this->getUser()->isSuperAdmin() || $this->getUser()->getAttribute('admin') == true)
       { 
         $c = new Criteria();
         $c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
 
         $this->grupos = GrupoPeer::doSelect($c);
       } 
       
       else
       {
         return $this->redirect('alumno/listado?grupo_id='.$this->getRequestParameter('grupo_id'));
       }  
  }

  public function executeList()
  {
    if ($this->getUser()->isSuperAdmin() || $this->getUser()->getAttribute('admin') == true)
    {
     $c = new Criteria();
     $c->addAscendingOrderByColumn(AlumnoPeer::GRUPO_ID);
     $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
     
     $this->alumnos = AlumnoPeer::doSelect($c);
     
     $c = new Criteria();
     $c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
     $this->grupos = GrupoPeer::doSelect($c);
    }
    else
    {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->addJoin(HorarioPeer::GRUPO_ID, GrupoPeer::ID);
    $c->add(HorarioPeer::PROFESOR_ID, $this->profesor->getId());
    $c->addJoin(AlumnoPeer::GRUPO_ID, GrupoPeer::ID); 
    
    $c->addAscendingOrderByColumn(AlumnoPeer::GRUPO_ID);
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    
    $c->setDistinct();
    
    
    $this->alumnos = AlumnoPeer::doSelect($c);
    
    $c = new Criteria();
    $c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    $this->grupos = GrupoPeer::doSelect($c);
    }
    
    $this->grupo_id = 0;
    
  }
  
  public function executeListado()
  { 
  if (!$this->getRequestParameter('grupo_id'))
   {
      
        $mensaje = 'No se puede visualizar el listado sin grupo asociado.';   
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    $c = new Criteria();
    $c->add(AlumnoPeer::GRUPO_ID, $this->getRequestParameter('grupo_id'));
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    $this->alumnos = AlumnoPeer::doSelect($c);
    
    $c = new Criteria();
    $c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    $this->grupos = GrupoPeer::doSelect($c);
    $this->grupo_id = $this->getRequestParameter('grupo_id');
    
    $grupo_tutor = GrupoPeer::retrieveByPk($this->grupo_id);
        
    $this->tutor = ProfesorPeer::retrieveByPk($grupo_tutor->getProfesorId());
    
    $this->setTemplate('list');
    }

  }

  public function executeFotos()
  {
    $c = new Criteria();
    $c->add(AlumnoPeer::GRUPO_ID, $this->getRequestParameter('grupo_id'));
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    $this->alumnos = AlumnoPeer::doSelect($c);

    $c = new Criteria();
    $c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    $this->grupos = GrupoPeer::doSelect($c);
    $this->grupo_id = $this->getRequestParameter('grupo_id');

    $grupo_tutor = GrupoPeer::retrieveByPk($this->grupo_id);

    $this->tutor = ProfesorPeer::retrieveByPk($grupo_tutor->getProfesorId());

  }
  
  public function executeDatos()
  {
    $c = new Criteria();
    $c->add(AlumnoPeer::GRUPO_ID, $this->getRequestParameter('grupo_id'));
    $c->addAscendingOrderByColumn(AlumnoPeer::NOMBRE);
    $this->alumnos = AlumnoPeer::doSelect($c);

    $this->tutor = ProfesorPeer::retrieveByPk($this->alumnos[0]->getGrupo()->getProfesorId());

  }

  public function executeShow()
  {
    $this->alumno = AlumnoPeer::retrieveByPk($this->getRequestParameter('id'));
    
    $c = new Criteria();
    $c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
    $this->grupos = GrupoPeer::doSelect($c);
    $this->forward404Unless($this->alumno);

    //Recupera la foto
    $this->dir = "images/grupos/".$this->alumno->getGrupoId();
    $this->foto = "";
    if(file_exists($this->dir))
    {
    $p = opendir($this->dir);

    while( false !== ( $filename = readdir( $p ) ) )
    {
      if ($filename != '.' &&  $filename != '..' && $filename != '.svn' && $filename != 'Thumbs.db' && $filename == $this->alumno->getId().'.jpg')
      {
        $this->foto = $filename;
      }
    }
    closedir($p);
    }

    //termina recuperar la foto
  }

  public function executeCreate()
  {
    $this->alumno = new Alumno();
     
    if ($this->getUser()->isSuperAdmin() || $this->getUser()->getAttribute('admin') == true)
    {
     if ($this->getRequestParameter('grupo_id') == 0)
     {
     $c = new Criteria();
     $c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
     $this->grupos = GrupoPeer::doSelect($c);
     }
     else
     {
     $c = new Criteria();
     $c->add(GrupoPeer::ID, $this->getRequestParameter('grupo_id'));
    
     $this->grupo = GrupoPeer::doSelectOne($c);
     }
    }
    else
    {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->add(GrupoPeer::PROFESOR_ID, $this->profesor->getId());
    
    $this->grupo = GrupoPeer::doSelectOne($c);
    
    $this->alumno->setGrupoId($this->getRequestParameter('grupo_id'));
    }
    
    $this->grupo_id = $this->getRequestParameter('grupo_id');

    $this->foto = "";
    
    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->alumno = AlumnoPeer::retrieveByPk($this->getRequestParameter('id'));
    if ($this->getUser()->isSuperAdmin() || $this->getUser()->getAttribute('admin') == true)
    {
     $c = new Criteria();
     $c->addAscendingOrderByColumn(GrupoPeer::NOMBRE);
     $this->grupos = GrupoPeer::doSelect($c);

    }
    else
    {

    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->add(GrupoPeer::PROFESOR_ID, $this->profesor->getId());
    
    $this->grupo = GrupoPeer::doSelectOne($c);
    }

    //Recupera la foto
    $this->dir = "images/grupos/".$this->alumno->getGrupoId();
    $this->foto = "";
    if(file_exists($this->dir))
    {
    $p = opendir($this->dir);

    while( false !== ( $filename = readdir( $p ) ) )
    {
      if ($filename != '.' &&  $filename != '..' && $filename != '.svn' && $filename != 'Thumbs.db' && $filename == $this->alumno->getId().'.jpg')
      {
        $this->foto = $filename;
      }
    }
    closedir($p);
    }

    //termina recuperar la foto
    
    $this->forward404Unless($this->alumno);
  }

  public function executeUpdate()
  {
  if (!$this->getRequestParameter('grupo_id'))
   {
      $mensaje = 'Un alumno debe estar asociado a un grupo.';      
      return $this->redirect('principal/error?mensaje='.$mensaje);
   }
   else
   {
    if (!$this->getRequestParameter('id'))
    {
      $alumno = new Alumno();
    }
    else
    {
      $alumno = AlumnoPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($alumno);
    }

    $alumno->setId($this->getRequestParameter('id'));
    $alumno->setGrupoId($this->getRequestParameter('grupo_id') ? $this->getRequestParameter('grupo_id') : null);
    $alumno->setCodigo($this->getRequestParameter('codigo'));
    $alumno->setNombre($this->getRequestParameter('nombre'));
    $alumno->setEmail($this->getRequestParameter('email'));
    $alumno->setObservaciones($this->getRequestParameter('observaciones'));
    $alumno->setActivo($this->getRequestParameter('activo', 0));

    $alumno->save();


    
    //guardamos la foto
    $dir = "images/grupos/".$this->getRequestParameter('grupo_id');

    $x = 1;

    $nombre = $_FILES['foto']['tmp_name'];

    if ($nombre)
    {

        if ($_FILES['foto']['name'] != "")
        {
        //A TRAVES DE GETIMAGESIZE OBTENEMOS UN ARRAY (MATRIZ) CON EL TAMAÑO, EL ALTO, EL ANCHO Y EL TIPO DE ARCHIVO
        $datos = getimagesize($nombre);

        //DE ACUERDO AL TIPO DE ARCHIVO (GIF, JPG, PNG) UTILIZAMOS LA FUNCION CORRESPONDIENTE DE PHP PARA CREAR UNA IMAGEN
        switch($datos[2])
        {
          case 1:
            //EL ARROBA SIRVE PARA EVITAR CUALQUIER POSIBLE MENSAJE DE ERROR DEL INTERPRETE, LA DESVENTAJA ES QUE SI OCURRE ALGUNO Y LA UTILIZAMOS NOS VA A COSTAR MUCHO MAS ENCONTRAR EL ERROR
            $img = @imagecreatefromgif($nombre);
            break;
          case 2:
            $img = @imagecreatefromjpeg($nombre);
            break;
          case 3:
            $img = @imagecreatefrompng($nombre);
            break;
        }

        //ALTO Y ANCHO ORIGINAL
        $al_o =$datos[1];

        $an_o = $datos[0];

        //ALTO Y ANCHO DESTINO, SI QUEREMOS OTRO TAMAÑO DE IMAGEN CAMBIAMOS ESTOS VALORES

        //SI ES UNA FOTO CUADRADA, LA ESCALO EN CUADRADO
        if ($an_o == $al_o)
        {
            $al_d = 400;
            $an_d = 400;
        }

        //SI ES UNA FOTO RECTANGULAR, LA ESCALO EN RECTANGULAR
        if ($an_o > $al_o)
        {
            $an_d = 600;
            $al_d = 400;  
        }

        //SI ES UNA FOTO ALARGADA, LA ESCALO EN ALARGADO
        if ($an_o < $al_o)
        {
            $al_d = 600;
            $an_d = 400;
        }

        //CALCULO LA RELACION ENTRE EL ALTO Y EL ANCHO DE ORIGEN Y EL ANCHO Y EL ALTO DE DESTINO Y DETERMINO CUAL ES LA MEJOR FORMA DE REESCALAR LA IMAGEN, ES DECIR, TOMANDO COMO BASE EL ANCHO O TOMANDO COMO BASE EL ALTO
        $alp = $al_o/$al_d;

        $anp = $an_o/$an_d;

        //CALCULO LA RELACION ENTRE EL ANCHO Y EL ALTO- UNA MUY COMUN ES LA 4:3 DONDE ESTA DIVISION DARÍA COMO RESULTADO UN 1.33333 PERIODICO
        $ratioo = $al_o / $an_o;

        //SI ES PREFERIBLE UTILIZAR COMO BASE EL ANCHO, EL ALTO ES AJUSTADO EN RELACION AL RATIO QUE QUIERO QUE SEA LA IMAGEN DE DESTINO
        if($alp>$anp){

          $alto = $an_d * $ratioo;

          $ancho = $an_d;
        //SI ES PREFERIBLE UTILIZAR COMO BASE EL ALTO , EL ANCHO ES AJUSTADO EN RELACION AL RATIO QUE QUIERO QUE SEA LA IMAGEN DE DESTINO
        }elseif($anp>$alp) {

          $ancho = $al_d / $ratioo;

          $alto = $al_d;

        } else {
          //SI AMBOS TIENEN EL MISMO RATIO QUIERE DECIR QUE SON PROPORCIONALES Y NO NECESITO AJUSTAR NADA POR ENDE PUEDO UTILIZAR DIRECTAMENTE LOS VALORES DE DESTINO COMO PARAMETROS
          $ancho = $an_d;

          $alto = $al_d;

        }

        //CREO UNA IMAGEN VACÍA CON EL TAMAÑO DE DESTINO
        $thumb2 = imagecreatetruecolor($an_d,$al_d);

        //LUEGO COPIO LA IMAGEN O PARTE DE ELLA SEGÚN SI ESTA ES PROPORCIONAL O NO UTILIZANDO LA FUNCION IMAGECOPYRESAMPLED, LA CUAL REALIZA UN SUAVIZADO SOBRE LA IMAGEN
        imagecopyresampled($thumb2, $img, 0, 0, 0, 0,$ancho, $alto, $datos[0], $datos[1]);

        /*
        ob_start();
        //DE ACUERDO AL TIPO DE IMAGEN CREO LAS CABECERAS HTML PARA QUE LA IMAGEN SEA  INTERPRETADA CORRECTAMENTE POR EL NAVEGADOR
        switch($datos[2])
        {
          case 1:
            header("Content-type: image/gif"); imagegif($thumb2);
            break;

          case 2:
            header("Content-type: image/jpeg");imagejpeg($thumb2);
            break;

          case 3:
            header("Content-type: image/png");imagepng($thumb2);
            break;
        }
        $im = ob_get_contents();
        ob_end_clean();
        */

        //copy($nombre,$dir1 . '/' .$alumno->getId());
        //copy($im,$dir2 . '/' . $_FILES['imagen']['name']);

        imagejpeg( $thumb2, $dir.'/'.$alumno->getId().'.jpg',  100 );


        //POR ULTIMO DESTRUYO LA IMAGEN PARA LIBERAR RECURSOS
        imagedestroy($thumb2);
        }
      }

    if($this->getRequestParameter('otro') == 1)
    {
       return $this->redirect('alumno/create?grupo_id='.$this->getRequestParameter('grupo_id'));
    }
    else
    {
        return $this->redirect('alumno/index?grupo_id='.$this->getRequestParameter('grupo_id'));
    }
    }
  }

  public function executeDelete()
  {
    $alumno = AlumnoPeer::retrieveByPk($this->getRequestParameter('id'));
    
    $grupo = $alumno->getGrupoId();
    
    $this->forward404Unless($alumno);

    //Borrado de la foto

    $dir = "images/grupos/".$alumno->getGrupoId();
    $dh = opendir($dir);
    if(!$dh)
    {
        echo "Error";
    }
    while (false !== ($obj = readdir($dh)))
    {
        if($obj == '.' || $obj == '..')
        {
            continue;
        }
        else
          if ($foto == $obj)
          {
           unlink($dir . '/' . $obj);
          }
    }

    closedir($dh);

    //termina el borrado de la foto

    $alumno->delete();
    
    if ($this->getUser()->isSuperAdmin() || $this->getUser()->getAttribute('admin') == true)
    {
    return $this->redirect('alumno/index');
    }
    else
    {
    return $this->redirect('alumno/index?grupo_id='.$grupo);
    }
  }

  public function executeImagendelete()
  {

    $this->alumno = AlumnoPeer::retrieveByPk($this->getRequestParameter('id'));

    $foto = $this->getRequestParameter('foto');

    //Borrado de la foto

    $dir = "images/grupos/".$this->alumno->getGrupoId();
    $dh = opendir($dir);
    if(!$dh)
    {
        echo "Error";
    }
    while (false !== ($obj = readdir($dh)))
    {
        if($obj == '.' || $obj == '..')
        {
            continue;
        }
        else
          if ($foto == $obj)
          {
           unlink($dir . '/' . $obj);
          }
    }

    closedir($dh);

    //termina el borrado de la foto
  }
}
