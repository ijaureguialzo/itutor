<?php

/*
  This file is part of iTutor.
  Copyright (C) 2008 Oihane Garcia Bolumburu <oihaneg@gmail.com>
  Copyright (C) 2008 Ion Jaureguialzo Sarasola <widemos@gmail.com>

  iTutor is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  iTutor is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with iTutor. If not, see <http://www.gnu.org/licenses/>.
*/

?>
<?php
// auto-generated by sfPropelCrud
// date: 2008/03/25 18:25:15
?>
<?php

/**
 * festivo actions.
 *
 * @package    gesal
 * @subpackage festivo
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class festivoActions extends sfActions
{
  public function executeIndex()
  {
    $this->fecha = getdate($this->getRequestParameter('fecha'));
    
    switch($this->fecha['mon'])
    {
      case 1:
        $this->dias = 31;
        break;
      case 2:
        if ($this->fecha['year']%4 == 0)
        {
          $this->dias = 29;
        }
        else
        {
          $this->dias = 28;        
        } 
        break;
      case 3:
        $this->dias = 31;
        break;
      case 4:
        $this->dias = 30;
        break;
      case 5:
        $this->dias = 31;
        break;
      case 6:
        $this->dias = 30;
        break;
      case 7:
        $this->dias = 31;
        break;
      case 8:
        $this->dias = 31;
        break;
      case 9:
        $this->dias = 30;
        break;
      case 10:
        $this->dias = 31;
        break;
      case 11:
        $this->dias = 30;
        break;
      case 12:
        $this->dias = 31;
        break;
    }
    
    $this->festivos = FestivoPeer::doSelect(new Criteria());
  }
  
  public function executeFestivo()
  {
    $fecha = date('Y-m-d',$this->getRequestParameter('dia'));
    
    $c = new Criteria();
    $c->add(FestivoPeer::FECHA,$fecha);
    
    $this->festivo = FestivoPeer::doSelectOne($c);
    
    if($this->festivo)
    { 
      $this->evaluacion = EvaluacionPeer::retrieveByPk($this->festivo->getEvaluacionId());
      $this->setTemplate('show');
    }
    else
    {
      return $this->redirect('festivo/create?dia='.$this->getRequestParameter('dia'));
    }
  }

  public function executeList()
  { 
    $this->fecha = getdate($this->getRequestParameter('fecha'));
    
    $c = new Criteria();
    $c->addAscendingOrderByColumn(FestivoPeer::FECHA);
    $this->festivos = FestivoPeer::doSelect($c);
    
    $this->evaluaciones = EvaluacionPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->festivo = FestivoPeer::retrieveByPk($this->getRequestParameter('id'));
    
    $this->evaluacion = EvaluacionPeer::retrieveByPk($this->festivo->getEvaluacionId());
    
    $this->forward404Unless($this->festivo);
  }

  public function executeCreate()
  {
    $fecha = date('Y-m-d',$this->getRequestParameter('dia'));
    
    $c = new Criteria();
    $c->add(EvaluacionPeer::FECHAINI,$fecha,Criteria::LESS_EQUAL);
    $c->add(EvaluacionPeer::FECHAFIN,$fecha,Criteria::GREATER_EQUAL);
    $this->evaluacion = EvaluacionPeer::doSelectOne($c);
    
    $this->festivo = new Festivo();
    
    $this->festivo->setFecha($fecha);
    $this->festivo->setEvaluacionId($this->evaluacion->getId());

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->festivo = FestivoPeer::retrieveByPk($this->getRequestParameter('id'));
    $fecha = $this->festivo->getFecha();
    $c = new Criteria();
    $c->add(EvaluacionPeer::FECHAINI,$fecha,Criteria::LESS_EQUAL);
    $c->add(EvaluacionPeer::FECHAFIN,$fecha,Criteria::GREATER_EQUAL);
    $this->evaluacion = EvaluacionPeer::doSelectOne($c);
    
    $this->forward404Unless($this->festivo);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $festivo = new Festivo();
    }
    else
    {
      $festivo = FestivoPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($festivo);
    }

    $festivo->setId($this->getRequestParameter('id'));
    $festivo->setFecha($this->getRequestParameter('fecha'));
    $festivo->setEvaluacionId($this->getRequestParameter('evaluacion_id'));
    $festivo->setMotivo($this->getRequestParameter('motivo'));
    $festivo->setActivo($this->getRequestParameter('activo', 0));

    $festivo->save();

    return $this->redirect('festivo/index?fecha='.strtotime($this->getRequestParameter('fecha')));
  }

  public function executeDelete()
  {
    $festivo = FestivoPeer::retrieveByPk($this->getRequestParameter('id'));
    $fecha = $festivo->getFecha();

    $this->forward404Unless($festivo);

    $festivo->delete();

    return $this->redirect('festivo/index?fecha='.strtotime($fecha));
  }
}
