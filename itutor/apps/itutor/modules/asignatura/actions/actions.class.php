<?php

/*
  This file is part of iTutor.
  Copyright (C) 2008 Oihane Garcia Bolumburu <oihaneg@gmail.com>
  Copyright (C) 2008 Ion Jaureguialzo Sarasola <widemos@gmail.com>

  iTutor is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  iTutor is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with iTutor. If not, see <http://www.gnu.org/licenses/>.
*/

?>
<?php
// auto-generated by sfPropelCrud
// date: 2008/03/07 16:33:36
?>
<?php

/**
 * asignatura actions.
 *
 * @package    gesal
 * @subpackage asignatura
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class asignaturaActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('asignatura', 'list');
  }

  public function executeList()
  {
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->add(AsignaturaPeer::PROFESOR_ID,$this->profesor->getId());
    $c->addAscendingOrderByColumn(AsignaturaPeer::NOMBRE);
    $this->asignaturas = AsignaturaPeer::doSelect($c);
    
  }

  public function executeShow()
  {
    $this->asignatura = AsignaturaPeer::retrieveByPk($this->getRequestParameter('id'));
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);

    $this->forward404Unless($this->asignatura);
  }

  public function executeCreate()
  {
    $this->asignatura = new Asignatura();
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->asignatura = AsignaturaPeer::retrieveByPk($this->getRequestParameter('id'));
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $this->forward404Unless($this->asignatura);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $asignatura = new Asignatura();
    }
    else
    {
      $asignatura = AsignaturaPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($asignatura);
    }

    $asignatura->setId($this->getRequestParameter('id'));
    $asignatura->setProfesorId($this->getRequestParameter('profesor_id') ? $this->getRequestParameter('profesor_id') : null);
    $asignatura->setNombre($this->getRequestParameter('nombre'));
    $asignatura->setDescripcion($this->getRequestParameter('descripcion'));
    $asignatura->setAula($this->getRequestParameter('aula'));
    $asignatura->setPorcentajepruebas($this->getRequestParameter('porcentajepruebas'));
    $asignatura->setPorcentajefaltas($this->getRequestParameter('porcentajefaltas'));
    $asignatura->setPorcentajecomportamiento($this->getRequestParameter('porcentajecomportamiento'));
    $asignatura->setActivo($this->getRequestParameter('activo', 0));
    $asignatura->setMaximofaltas($this->getRequestParameter('maximofaltas'));
    
    $total_porcentajes = $this->getRequestParameter('porcentajepruebas') + $this->getRequestParameter('porcentajefaltas') + $this->getRequestParameter('porcentajecomportamiento');
    
    if($total_porcentajes != 100)
    {
      $mensaje = 'La suma de los porcentajes de las pruebas, faltas y el comportamiento no suman 100.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
    }
    else
    {
    $asignatura->save();
    
    $this->getUser()->setAttribute('asignaturas',true);

    return $this->redirect('asignatura/list');
    }
  }
  
  public function executeError()
  {
  
  }

  public function executeDelete()
  {
    $asignatura = AsignaturaPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($asignatura);

    $asignatura->delete();
    
    $d = new Criteria();
    $d->add(ProfesorPeer::CODIGO,$this->getUser()->getAttribute('codigo'));
    
    $this->profesor = ProfesorPeer::doSelectOne($d);
    
    $c = new Criteria();
    $c->add(AsignaturaPeer::PROFESOR_ID,$this->profesor->getId());
    $asignaturas = AsignaturaPeer::doSelect($c);
        
    if (count($asignaturas) > 0)
    {
      $this->getUser()->setAttribute('asignaturas',true);        
    }
    else
    {
      $this->getUser()->setAttribute('asignaturas',false);
    }

    return $this->redirect('asignatura/list');
  }
}
