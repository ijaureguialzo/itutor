<?php

/*
  This file is part of iTutor.
  Copyright (C) 2008 Oihane Garcia Bolumburu <oihaneg@gmail.com>
  Copyright (C) 2008 Ion Jaureguialzo Sarasola <widemos@gmail.com>

  iTutor is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  iTutor is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with iTutor. If not, see <http://www.gnu.org/licenses/>.
*/

?>
<?php
// auto-generated by sfPropelCrud
// date: 2008/03/17 11:55:21
?>
<?php

/**
 * perfil actions.
 *
 * @package    gesal
 * @subpackage perfil
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class perfilActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('perfil', 'list');
  }

  public function executeList()
  {
    $this->perfils = PerfilPeer::doSelect(new Criteria());

    $this->horas = HoraPeer::doSelect(new Criteria());
  }

  public function executePerfilhora()
  {
    $c = new Criteria();
    $c->add(HoraperfilPeer::PERFIL_ID,$this->getRequestParameter('perfil'));
    
    $this->perfil = PerfilPeer::retrieveByPk($this->getRequestParameter('perfil'));
    $this->horas = HoraPeer::doSelect(new Criteria());
    $this->horasperfil = HoraperfilPeer::doSelect($c);
  }
  public function executeShow()
  {
    $this->perfil = PerfilPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->perfil);
  }

  public function executeCreate()
  {
    $this->perfil = new Perfil();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->perfil = PerfilPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->perfil);
  }
  
  public function executePerfilhoracreate()
  {
    $this->horaperfil = new Horaperfil();
    
    $this->perfil = PerfilPeer::retrieveByPk($this->getRequestParameter('perfil'));

    $this->setTemplate('perfilhoraedit');
  }

  public function executePerfilhoraedit()
  {
    $this->horaperfil = HoraperfilPeer::retrieveByPk($this->getRequestParameter('id'));
    
    $this->perfil = PerfilPeer::retrieveByPk($this->getRequestParameter('perfil'));
    $this->forward404Unless($this->horaperfil);
  }
  
   public function executePerfilhoraupdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $horaperfil = new Horaperfil();
    }
    else
    {
      $horaperfil = HoraperfilPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($horaperfil);
    }

    $horaperfil->setId($this->getRequestParameter('id'));
    $horaperfil->setPerfilId($this->getRequestParameter('perfil_id'));
    $horaperfil->setHoraId($this->getRequestParameter('hora_id'));
    $horaperfil->setOrden($this->getRequestParameter('orden'));
    $horaperfil->setActivo($this->getRequestParameter('activo', 0));

    $horaperfil->save();

    return $this->redirect('perfil/perfilhora?perfil='.$horaperfil->getPerfilId());
  }
  public function executePerfilhoradelete()
  {
    $horaperfil = HoraperfilPeer::retrieveByPk($this->getRequestParameter('id'));
    
    $perfil = $horaperfil->getPerfilId();

    $this->forward404Unless($horaperfil);

    $horaperfil->delete();

    return $this->redirect('perfil/perfilhora?perfil='.$perfil);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $perfil = new Perfil();
    }
    else
    {
      $perfil = PerfilPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($perfil);
    }

    $perfil->setId($this->getRequestParameter('id'));
    $perfil->setNombre($this->getRequestParameter('nombre'));
    $perfil->setDescripcion($this->getRequestParameter('descripcion'));
    $perfil->setActivo($this->getRequestParameter('activo', 0));

    $perfil->save();

    return $this->redirect('perfil/list');
  }
  
  public function executeError()
  {
    $this->mensaje = $this->getRequestParameter('mensaje');
  }

  public function executeDelete()
  {
    $perfil = PerfilPeer::retrieveByPk($this->getRequestParameter('id'));

    $c = new Criteria();
    $c->add(ProfesorPeer::PERFIL_ID,$perfil->getId());
    $profesores = ProfesorPeer::doSelect($c);
    
      
    if (count($profesores) != 0)
    {
      $mensaje = 'No se puede eliminar el perfil porque existen profesores que lo tiene asignado.';     
      return $this->redirect('principal/error?mensaje='.$mensaje);
    }
    else
    {

    $this->forward404Unless($perfil);
    $perfil->delete();

    return $this->redirect('perfil/list');
    }
  }
}
