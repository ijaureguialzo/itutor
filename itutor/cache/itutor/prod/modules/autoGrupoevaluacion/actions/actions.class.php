<?php
// auto-generated by sfPropelAdmin
// date: 2016/09/08 08:53:29
?>
<?php

/**
 * autoGrupoevaluacion actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoGrupoevaluacion
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 9855 2008-06-25 11:26:01Z FabianLange $
 */
class autoGrupoevaluacionActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('grupoevaluacion', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();


    // pager
    $this->pager = new sfPropelPager('Grupoevaluacion', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', $this->getUser()->getAttribute('page', 1, 'sf_admin/grupoevaluacion')));
    $this->pager->init();
    // save page
    if ($this->getRequestParameter('page')) {
        $this->getUser()->setAttribute('page', $this->getRequestParameter('page'), 'sf_admin/grupoevaluacion');
    }
  }

  public function executeCreate()
  {
    return $this->forward('grupoevaluacion', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('grupoevaluacion', 'edit');
  }

  public function executeEdit()
  {
    $this->grupoevaluacion = $this->getGrupoevaluacionOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateGrupoevaluacionFromRequest();

      $this->saveGrupoevaluacion($this->grupoevaluacion);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('grupoevaluacion/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('grupoevaluacion/list');
      }
      else
      {
        return $this->redirect('grupoevaluacion/edit?id='.$this->grupoevaluacion->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->grupoevaluacion = GrupoevaluacionPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->grupoevaluacion);

    try
    {
      $this->deleteGrupoevaluacion($this->grupoevaluacion);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Grupoevaluacion. Make sure it does not have any associated items.');
      return $this->forward('grupoevaluacion', 'list');
    }

    return $this->redirect('grupoevaluacion/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->grupoevaluacion = $this->getGrupoevaluacionOrCreate();
    $this->updateGrupoevaluacionFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveGrupoevaluacion($grupoevaluacion)
  {
    $grupoevaluacion->save();

  }

  protected function deleteGrupoevaluacion($grupoevaluacion)
  {
    $grupoevaluacion->delete();
  }

  protected function updateGrupoevaluacionFromRequest()
  {
    $grupoevaluacion = $this->getRequestParameter('grupoevaluacion');

    if (isset($grupoevaluacion['grupo_id']))
    {
    $this->grupoevaluacion->setGrupoId($grupoevaluacion['grupo_id'] ? $grupoevaluacion['grupo_id'] : null);
    }
    if (isset($grupoevaluacion['evaluacion_id']))
    {
    $this->grupoevaluacion->setEvaluacionId($grupoevaluacion['evaluacion_id'] ? $grupoevaluacion['evaluacion_id'] : null);
    }
    $this->grupoevaluacion->setActivo(isset($grupoevaluacion['activo']) ? $grupoevaluacion['activo'] : 0);
    if (isset($grupoevaluacion['updated_at']))
    {
      if ($grupoevaluacion['updated_at'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($grupoevaluacion['updated_at']))
          {
            $value = $dateFormat->format($grupoevaluacion['updated_at'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $grupoevaluacion['updated_at'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->grupoevaluacion->setUpdatedAt($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->grupoevaluacion->setUpdatedAt(null);
      }
    }
  }

  protected function getGrupoevaluacionOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $grupoevaluacion = new Grupoevaluacion();
    }
    else
    {
      $grupoevaluacion = GrupoevaluacionPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($grupoevaluacion);
    }

    return $grupoevaluacion;
  }

  protected function processFilters()
  {
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/grupoevaluacion/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/grupoevaluacion/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/grupoevaluacion/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/grupoevaluacion/sort'))
    {
      $sort_column = GrupoevaluacionPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/grupoevaluacion/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'grupoevaluacion{id}' => 'Id:',
      'grupoevaluacion{grupo_id}' => 'Grupo:',
      'grupoevaluacion{evaluacion_id}' => 'Evaluacion:',
      'grupoevaluacion{activo}' => 'Activo:',
      'grupoevaluacion{updated_at}' => 'Updated at:',
    );
  }
}
